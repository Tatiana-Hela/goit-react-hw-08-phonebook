{"version":3,"file":"static/js/774.f602ee3d.chunk.js","mappings":"kMAAaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAM,E,UCC5D,EAAmE,2B,gIC2FnE,EA5EoB,WAClB,IAAAC,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA4BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAElBG,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,SAAAC,GACnB,IAAAC,EAAwBD,EAAEE,OAAlBX,EAAIU,EAAJV,KAAMY,EAAKF,EAALE,MACd,OAAQZ,GACN,IAAK,OACHC,EAAQW,GACR,MAEF,IAAK,SACHP,EAAUO,GACV,MAEF,QACE,MAAM,IAAIC,MAAM,2BAEtB,EAQA,OACEC,EAAAA,EAAAA,KAAA,QAAMC,SAPa,SAAAN,GACnBA,EAAEO,iBACFV,GAASW,EAAAA,EAAAA,IAAW,CAAEjB,KAAAA,EAAMI,OAAAA,KAC5BH,EAAQ,IACRI,EAAU,GACZ,EAE+Ba,UAC3BC,EAAAA,EAAAA,MAACC,EAAAA,GAAW,CAACC,MAAM,QAAOH,SAAA,EACxBJ,EAAAA,EAAAA,KAACQ,EAAAA,EAAS,CAACC,QAAQ,OAAML,SAAC,UAC1BC,EAAAA,EAAAA,MAACK,EAAAA,EAAU,CAAAN,SAAA,EACTJ,EAAAA,EAAAA,KAACW,EAAAA,EAAgB,CACfC,cAAc,OACdR,UAAUJ,EAAAA,EAAAA,KAACa,EAAAA,EAAI,CAACC,GAAIC,EAAAA,IAAkBC,MAAM,YAE9ChB,EAAAA,EAAAA,KAACiB,EAAAA,EAAK,CACJC,GAAG,OACHC,KAAK,OACLjC,KAAK,OACLY,MAAOZ,EACPkC,YAAY,aACZC,QAAQ,yHACRC,MAAM,yIACNC,SAAU7B,EACV8B,UAAQ,QAGZxB,EAAAA,EAAAA,KAACQ,EAAAA,EAAS,CAACC,QAAQ,SAASgB,GAAG,OAAMrB,SAAC,YAGtCC,EAAAA,EAAAA,MAACK,EAAAA,EAAU,CAAAN,SAAA,EACTJ,EAAAA,EAAAA,KAACW,EAAAA,EAAgB,CACfC,cAAc,OACdR,UAAUJ,EAAAA,EAAAA,KAAC0B,EAAAA,EAAS,CAACV,MAAM,YAE7BhB,EAAAA,EAAAA,KAACiB,EAAAA,EAAK,CACJC,GAAG,SACHC,KAAK,MACLjC,KAAK,SACLY,MAAOR,EACP8B,YAAY,eACZC,QAAQ,yFACRE,SAAU7B,EACV4B,MAAM,+FACNE,UAAQ,QAGZnB,EAAAA,EAAAA,MAACsB,EAAAA,EAAM,CAACR,KAAK,SAASS,YAAY,OAAOH,GAAG,OAAOI,aAAa,MAAKzB,SAAA,CAAC,QAChEJ,EAAAA,EAAAA,KAACa,EAAAA,EAAI,CAACC,GAAIgB,EAAAA,IAAavB,MAAM,OAAOwB,OAAO,OAAOC,GAAG,eAKnE,E,UCxFaC,EAAe,SAAAtD,GAAK,OAAIA,EAAMuD,MAAO,EAErCC,GAAwBC,EAAAA,EAAAA,IACnC,CAACH,EAAcvD,IACf,SAACwD,EAAQtD,GACP,IAAMyD,EAAkBH,EAAOI,OAAOC,cAEtC,OAAO3D,EAASsD,QAAO,SAAAM,GAAO,OAC5BA,EAAQtD,KAAKoD,OAAOC,cAAcE,SAASJ,EAAgB,GAE/D,I,UCZF,GAAgB,KAAO,2B,uCCqCvB,EAhCoB,SAAHK,GAA8B,IAAxBxB,EAAEwB,EAAFxB,GAAIhC,EAAIwD,EAAJxD,KAAMI,EAAMoD,EAANpD,OACzBE,GAAWC,EAAAA,EAAAA,MACjB,OACEY,EAAAA,EAAAA,MAACsC,EAAAA,GAAQ,CAEPC,QAAQ,OACRC,UAAU,oGACVC,EAAE,WACFjB,aAAa,MAAKzB,SAAA,EAElBC,EAAAA,EAAAA,MAAC0C,EAAAA,EAAI,CAACC,SAAS,OAAM5C,SAAA,CAAElB,EAAK,SAC5Bc,EAAAA,EAAAA,KAAC+C,EAAAA,EAAI,CAACC,SAAS,OAAOC,GAAG,MAAMC,WAAW,MAAK9C,SAC5Cd,KAEHU,EAAAA,EAAAA,KAACmD,EAAAA,EAAU,CACTF,GAAG,OACHrB,YAAY,QACZ,aAAW,eACXwB,MAAMpD,EAAAA,EAAAA,KAACqD,EAAAA,EAAQ,OAEjBrD,EAAAA,EAAAA,KAACmD,EAAAA,EAAU,CACTF,GAAG,MACHrB,YAAY,MACZ,aAAW,iBACXwB,MAAMpD,EAAAA,EAAAA,KAACsD,EAAAA,EAAU,IACjBnC,KAAK,SACLoC,QAAS,kBAAM/D,GAASgE,EAAAA,EAAAA,IAActC,GAAI,MAtBvCA,EA0BX,ECbA,EAhBoB,WAClB,IAAMtC,GAAW6E,EAAAA,EAAAA,IAAYtB,GAE7B,OACE9B,EAAAA,EAAAA,MAAAqD,EAAAA,SAAA,CAAAtD,SAAA,CACuB,IAApBxB,EAAS+E,SACR3D,EAAAA,EAAAA,KAAA,KAAG4D,UAAWC,EAAAA,KAASzD,SAAC,8BAE1BJ,EAAAA,EAAAA,KAAC8D,EAAAA,GAAI,CAACrC,GAAG,OAAOmB,QAAQ,OAAOmB,cAAc,SAASC,IAAI,OAAM5D,SAC7DxB,EAASqF,KAAI,SAAAvB,GAA2B,IAAxBxB,EAAEwB,EAAFxB,GAAIhC,EAAIwD,EAAJxD,KAAMI,EAAMoD,EAANpD,OACzB,OAAOU,EAAAA,EAAAA,KAACkE,EAAW,CAAUhD,GAAIA,EAAIhC,KAAMA,EAAMI,OAAQA,GAAhC4B,EAC3B,QAIR,E,mBCYA,EAtBe,WACb,IAAMgB,GAASuB,EAAAA,EAAAA,IAAYxB,GACrBzC,GAAWC,EAAAA,EAAAA,MACjB,OACEY,EAAAA,EAAAA,MAACC,EAAAA,GAAW,CAACC,MAAM,QAAOH,SAAA,EACxBJ,EAAAA,EAAAA,KAACQ,EAAAA,EAAS,CAAAJ,SAAC,2BACXC,EAAAA,EAAAA,MAACK,EAAAA,EAAU,CAAAN,SAAA,EACTJ,EAAAA,EAAAA,KAACmE,EAAAA,EAAiB,CAChBvD,cAAc,OACdR,UAAUJ,EAAAA,EAAAA,KAACoE,EAAAA,EAAU,CAACpD,MAAM,YAE9BhB,EAAAA,EAAAA,KAACiB,EAAAA,EAAK,CACJE,KAAK,OACLC,YAAY,aACZtB,MAAOoC,EACPX,SAAU,SAAA5B,GAAC,OAAIH,GAAS6E,EAAAA,EAAAA,GAAU1E,EAAEE,OAAOC,OAAO,SAK5D,E,UCsCA,EA1DqB,WACnB,IAAMlB,GAAW6E,EAAAA,EAAAA,IAAY/E,GACvBc,GAAWC,EAAAA,EAAAA,OAEjB6E,EAAAA,EAAAA,YAAU,WACR9E,GAAS+E,EAAAA,EAAAA,MACX,GAAG,CAAC/E,IAGJ,IAAMgF,EAAaC,QAAQ7F,EAAS+E,QACpC,OACEtD,EAAAA,EAAAA,MAACqE,EAAAA,GAAG,CACF9B,QAAQ,OACR+B,eAAe,SACfX,IAAI,QACJf,GAAG,OACH2B,GAAG,OACHC,GAAG,OACH7C,GAAG,OACH8C,GAAG,OAAM1E,SAAA,EAETC,EAAAA,EAAAA,MAACqE,EAAAA,GAAG,CACFnE,MAAM,QACNwB,OAAO,QACPa,QAAQ,OACRmB,cAAc,SACdgB,WAAW,SACXjC,EAAE,IACFjB,aAAa,MACbgB,UAAU,oGAAmGzC,SAAA,EAE7GJ,EAAAA,EAAAA,KAAC+C,EAAAA,EAAI,CAACC,SAAS,OAAOE,WAAW,MAAM8B,GAAG,OAAM5E,SAAC,kBAGjDJ,EAAAA,EAAAA,KAACiF,EAAW,QAEd5E,EAAAA,EAAAA,MAACqE,EAAAA,GAAG,CAACnE,MAAM,QAAQqC,QAAQ,OAAOmB,cAAc,SAAQ3D,SAAA,EACtDJ,EAAAA,EAAAA,KAAC+C,EAAAA,EAAI,CACHC,SAAS,OACTkC,UAAU,SACVzD,GAAG,OACHuD,GAAG,OACH9B,WAAW,MAAK9C,SACjB,aAGAoE,IAAcxE,EAAAA,EAAAA,KAACmF,EAAM,IACrBX,IAAcxE,EAAAA,EAAAA,KAACoF,EAAW,KAEzBZ,IACAxE,EAAAA,EAAAA,KAAA,KAAG4D,UAAWC,EAASzD,SAAC,sDAOlC,C","sources":["redux/contacts/contacts-selector.js","webpack://react-homework-template/./src/components/pages/ContactsPage/ContactsPage.module.css?c85d","components/ContactForm/ContactForm.jsx","redux/filter/filter-selector.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactsPage_container__idZzt\",\"text\":\"ContactsPage_text__H967y\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  Button,\n  Input,\n  InputGroup,\n  FormControl,\n  FormLabel,\n  Icon,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { PhoneIcon } from '@chakra-ui/icons';\nimport { MdAddCircle } from 'react-icons/md';\nimport { BsFillPersonFill } from 'react-icons/bs';\nimport { addContact } from 'redux/contacts/contacts-operations';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        throw new Error(\"There isn't such option\");\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(addContact({ name, number }));\n    setName('');\n    setNumber('');\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <FormControl width=\"350px\">\n        <FormLabel htmlFor=\"name\">Name</FormLabel>\n        <InputGroup>\n          <InputLeftElement\n            pointerEvents=\"none\"\n            children={<Icon as={BsFillPersonFill} color=\"grey\" />}\n          />\n          <Input\n            id=\"name\"\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            placeholder=\"Enter name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            onChange={handleChange}\n            required\n          />\n        </InputGroup>\n        <FormLabel htmlFor=\"number\" mt=\"15px\">\n          Number\n        </FormLabel>\n        <InputGroup>\n          <InputLeftElement\n            pointerEvents=\"none\"\n            children={<PhoneIcon color=\"gray\" />}\n          />\n          <Input\n            id=\"number\"\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            placeholder=\"Enter number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            onChange={handleChange}\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </InputGroup>\n        <Button type=\"submit\" colorScheme=\"blue\" mt=\"20px\" borderRadius=\"6px\">\n          Add <Icon as={MdAddCircle} width=\"24px\" height=\"24px\" pl=\"6px\" />\n        </Button>\n      </FormControl>\n    </form>\n  );\n};\nexport default ContactForm;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectContacts } from 'redux/contacts/contacts-selector';\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectFilter, selectContacts],\n  (filter, contacts) => {\n    const normalizeFilter = filter.trim().toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.trim().toLowerCase().includes(normalizeFilter)\n    );\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\nimport { DeleteIcon, EditIcon } from '@chakra-ui/icons';\nimport { IconButton, ListItem, Text } from '@chakra-ui/react';\n\nconst ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  return (\n    <ListItem\n      key={id}\n      display=\"flex\"\n      boxShadow=\"0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14), 0px 2px 1px rgba(0, 0, 0, 0.2);\"\n      p=\"6px 10px\"\n      borderRadius=\"6px\"\n    >\n      <Text fontSize=\"20px\">{name}: </Text>\n      <Text fontSize=\"20px\" ml=\"6px\" fontWeight=\"500\">\n        {number}\n      </Text>\n      <IconButton\n        ml=\"auto\"\n        colorScheme=\"green\"\n        aria-label=\"Edit contact\"\n        icon={<EditIcon />}\n      />\n      <IconButton\n        ml=\"6px\"\n        colorScheme=\"red\"\n        aria-label=\"Delete contact\"\n        icon={<DeleteIcon />}\n        type=\"button\"\n        onClick={() => dispatch(deleteContact(id))}\n      />\n    </ListItem>\n  );\n};\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/filter/filter-selector';\nimport { List } from '@chakra-ui/react';\nimport css from '../ContactList/ContactList.module.css';\n\nimport ContactItem from 'components/ContactItem/ContactItem';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <>\n      {contacts.length === 0 && (\n        <p className={css.text}>There is no such contact</p>\n      )}\n      <List mt=\"20px\" display=\"flex\" flexDirection=\"column\" gap=\"15px\">\n        {contacts.map(({ id, name, number }) => {\n          return <ContactItem key={id} id={id} name={name} number={number} />;\n        })}\n      </List>\n    </>\n  );\n};\nexport default ContactList;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/filter-slice';\nimport { selectFilter } from 'redux/filter/filter-selector';\nimport { SearchIcon } from '@chakra-ui/icons';\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputRightElement,\n} from '@chakra-ui/react';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  return (\n    <FormControl width=\"350px\">\n      <FormLabel>Find contacts by name</FormLabel>\n      <InputGroup>\n        <InputRightElement\n          pointerEvents=\"none\"\n          children={<SearchIcon color=\"gray\" />}\n        />\n        <Input\n          type=\"text\"\n          placeholder=\"Enter name\"\n          value={filter}\n          onChange={e => dispatch(setFilter(e.target.value))}\n        />\n      </InputGroup>\n    </FormControl>\n  );\n};\n\nexport default Filter;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/contacts-selector';\nimport { useEffect } from 'react';\nimport css from '../ContactsPage/ContactsPage.module.css';\n\nimport { fetchContacts } from 'redux/contacts/contacts-operations';\n\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { Box, Text } from '@chakra-ui/react';\n\nconst ContactsPage = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  // console.log(contacts);\n  const isContacts = Boolean(contacts.length);\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"center\"\n      gap=\"100px\"\n      ml=\"auto\"\n      mr=\"auto\"\n      pt=\"60px\"\n      pl=\"60px\"\n      pr=\"60px\"\n    >\n      <Box\n        width=\"400px\"\n        height=\"320px\"\n        display=\"flex\"\n        flexDirection=\"column\"\n        alignItems=\"center\"\n        p=\"6\"\n        borderRadius=\"6px\"\n        boxShadow=\"0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14), 0px 2px 1px rgba(0, 0, 0, 0.2);\"\n      >\n        <Text fontSize=\"24px\" fontWeight=\"500\" mb=\"20px\">\n          Add contacts\n        </Text>\n        <ContactForm />\n      </Box>\n      <Box width=\"600px\" display=\"flex\" flexDirection=\"column\">\n        <Text\n          fontSize=\"24px\"\n          textAlign=\"center\"\n          mt=\"24px\"\n          mb=\"20px\"\n          fontWeight=\"500\"\n        >\n          Contacts\n        </Text>\n        {isContacts && <Filter />}\n        {isContacts && <ContactList />}\n\n        {!isContacts && (\n          <p className={css.text}>\n            Your phonebook is empty. Please add contact.\n          </p>\n        )}\n      </Box>\n    </Box>\n  );\n};\nexport default ContactsPage;\n"],"names":["selectContacts","state","contacts","items","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","dispatch","useDispatch","handleChange","e","_e$target","target","value","Error","_jsx","onSubmit","preventDefault","addContact","children","_jsxs","FormControl","width","FormLabel","htmlFor","InputGroup","InputLeftElement","pointerEvents","Icon","as","BsFillPersonFill","color","Input","id","type","placeholder","pattern","title","onChange","required","mt","PhoneIcon","Button","colorScheme","borderRadius","MdAddCircle","height","pl","selectFilter","filter","selectVisibleContacts","createSelector","normalizeFilter","trim","toLowerCase","contact","includes","_ref","ListItem","display","boxShadow","p","Text","fontSize","ml","fontWeight","IconButton","icon","EditIcon","DeleteIcon","onClick","deleteContact","useSelector","_Fragment","length","className","css","List","flexDirection","gap","map","ContactItem","InputRightElement","SearchIcon","setFilter","useEffect","fetchContacts","isContacts","Boolean","Box","justifyContent","mr","pt","pr","alignItems","mb","ContactForm","textAlign","Filter","ContactList"],"sourceRoot":""}