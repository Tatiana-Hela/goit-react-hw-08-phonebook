{"version":3,"file":"static/js/867.c17d786b.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selector.js","components/ContactForm/ContactForm.jsx","redux/filter/filter-selector.js","components/EditModal.jsx/EditModal.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.loading;\nexport const selectIsError = state => state.contacts.error;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  Button,\n  Input,\n  InputGroup,\n  FormControl,\n  FormLabel,\n  Icon,\n  InputLeftElement,\n  useToast,\n} from '@chakra-ui/react';\nimport { PhoneIcon } from '@chakra-ui/icons';\nimport { MdAddCircle } from 'react-icons/md';\nimport { BsFillPersonFill } from 'react-icons/bs';\n\nimport { addContact } from 'redux/contacts/contacts-operations';\n\nconst ContactForm = () => {\n  const toast = useToast();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        throw new Error(\"There isn't such option\");\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(addContact({ name, number }))\n      .unwrap()\n      .then(() => {\n        toast({\n          description: 'Contact added',\n          position: 'top',\n          status: 'success',\n        });\n      })\n      .catch(() => {\n        toast({\n          description: 'Something went wrong...Try reloading the page',\n          position: 'top',\n          status: 'error',\n        });\n      });\n    setName('');\n    setNumber('');\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <FormControl width={{ base: '100%', sm: '350px' }}>\n        <FormLabel htmlFor=\"name\">Name</FormLabel>\n        <InputGroup>\n          <InputLeftElement\n            pointerEvents=\"none\"\n            children={<Icon as={BsFillPersonFill} color=\"grey\" />}\n          />\n          <Input\n            id=\"name\"\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            placeholder=\"Enter name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            onChange={handleChange}\n            required\n          />\n        </InputGroup>\n        <FormLabel htmlFor=\"number\" mt={{ base: '15px', sm: '0' }}>\n          Number\n        </FormLabel>\n        <InputGroup>\n          <InputLeftElement\n            pointerEvents=\"none\"\n            children={<PhoneIcon color=\"gray\" />}\n          />\n          <Input\n            id=\"number\"\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            placeholder=\"Enter number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            onChange={handleChange}\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </InputGroup>\n        <Button\n          type=\"submit\"\n          colorScheme=\"blue\"\n          mt=\"20px\"\n          borderRadius=\"6px\"\n          ml={{ sm: '10px' }}\n        >\n          Add <Icon as={MdAddCircle} width=\"24px\" height=\"24px\" pl=\"6px\" />\n        </Button>\n      </FormControl>\n    </form>\n  );\n};\nexport default ContactForm;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectContacts } from 'redux/contacts/contacts-selector';\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectFilter, selectContacts],\n  (filter, contacts) => {\n    const normalizeFilter = filter.trim().toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.trim().toLowerCase().includes(normalizeFilter)\n    );\n  }\n);\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useState, useCallback } from 'react';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  InputGroup,\n  InputLeftElement,\n  useToast,\n} from '@chakra-ui/react';\nimport { Icon, PhoneIcon } from '@chakra-ui/icons';\nimport { BsFillPersonFill } from 'react-icons/bs';\n\nimport { updateContact } from 'redux/contacts/contacts-operations';\n\nconst EditModal = ({ isOpen, handleClose, id, name, number }) => {\n  const toast = useToast();\n  const initialState = {\n    name,\n    number,\n  };\n\n  const [state, setState] = useState({ ...initialState });\n  const dispatch = useDispatch();\n  const handleChange = useCallback(\n    ({ target }) => {\n      const { name, value } = target;\n      setState(prevState => {\n        return { ...prevState, [name]: value };\n      });\n    },\n    [setState]\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(updateContact({ id, state }))\n      .unwrap()\n      .then(() =>\n        toast({\n          description: 'Contact edited',\n          position: 'top',\n          status: 'success',\n        })\n      )\n      .catch(() =>\n        toast({\n          description: 'Something went wrong...Try reloading the page',\n          position: 'top',\n          status: 'error',\n        })\n      );\n    handleClose();\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={handleClose}>\n      <ModalOverlay />\n      <ModalContent marginX=\"10px\">\n        <ModalHeader textAlign=\"center\" fontSize=\"22px\" fontWeight=\"500\">\n          Edit contact\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <form onSubmit={handleSubmit}>\n            <FormControl>\n              <FormLabel htmlFor=\"name\">Name</FormLabel>\n              <InputGroup>\n                <InputLeftElement\n                  pointerEvents=\"none\"\n                  children={<Icon as={BsFillPersonFill} color=\"grey\" />}\n                />\n                <Input\n                  id=\"name\"\n                  type=\"text\"\n                  name=\"name\"\n                  value={state.name}\n                  placeholder=\"Enter name\"\n                  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                  title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                  required\n                  onChange={handleChange}\n                />\n              </InputGroup>\n              <FormLabel htmlFor=\"number\" mt=\"15px\">\n                Number\n              </FormLabel>\n              <InputGroup>\n                <InputLeftElement\n                  pointerEvents=\"none\"\n                  children={<PhoneIcon color=\"gray\" />}\n                />\n                <Input\n                  id=\"number\"\n                  type=\"tel\"\n                  name=\"number\"\n                  value={state.number}\n                  placeholder=\"Enter number\"\n                  pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                  title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                  required\n                  onChange={handleChange}\n                />\n              </InputGroup>\n              <Button type=\"submit\" colorScheme=\"blue\" mr={3} mt=\"20px\">\n                Save\n              </Button>\n              <Button onClick={handleClose} mt=\"20px\">\n                Cancel\n              </Button>\n            </FormControl>\n          </form>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\nexport default EditModal;\n\nEditModal.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  isOpen: PropTypes.func.isRequired,\n  handleClose: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { DeleteIcon, EditIcon } from '@chakra-ui/icons';\nimport {\n  Box,\n  IconButton,\n  ListItem,\n  Text,\n  Tooltip,\n  useToast,\n} from '@chakra-ui/react';\n\nimport { deleteContact } from 'redux/contacts/contacts-operations';\nimport EditModal from 'components/EditModal.jsx/EditModal';\n\nconst ContactItem = ({ id, name, number }) => {\n  const toast = useToast();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const handleOpenModal = () => setIsOpen(true);\n  const handleCloseModal = () => setIsOpen(false);\n\n  const handleDeleteContact = () => {\n    dispatch(deleteContact(id))\n      .unwrap()\n      .then(() =>\n        toast({\n          description: 'Contact deleted',\n          position: 'top',\n          status: 'success',\n        })\n      )\n      .catch(() =>\n        toast({\n          description: 'Something went wrong...Try reloading the page',\n          position: 'top',\n          status: 'error',\n        })\n      );\n  };\n\n  return (\n    <>\n      <ListItem\n        key={id}\n        display=\"flex\"\n        boxShadow=\"0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14), 0px 2px 1px rgba(0, 0, 0, 0.2);\"\n        p=\"6px 10px\"\n        borderRadius=\"6px\"\n        alignItems=\"center\"\n      >\n        <Box display=\"block\">\n          <Text fontSize=\"20px\" fontWeight=\"500\">\n            {name}\n          </Text>\n          <Text fontSize=\"18px\" color=\"#5F5F5F\">\n            {number}\n          </Text>\n        </Box>\n        <Tooltip label=\"Edit contact\">\n          <IconButton\n            ml=\"auto\"\n            colorScheme=\"green\"\n            aria-label=\"Edit contact\"\n            icon={<EditIcon />}\n            onClick={handleOpenModal}\n          />\n        </Tooltip>\n        <Tooltip label=\"Delete contact\">\n          <IconButton\n            ml=\"6px\"\n            colorScheme=\"red\"\n            aria-label=\"Delete contact\"\n            icon={<DeleteIcon />}\n            type=\"button\"\n            onClick={handleDeleteContact}\n          />\n        </Tooltip>\n      </ListItem>\n      {isOpen && (\n        <EditModal\n          isOpen={isOpen}\n          handleClose={handleCloseModal}\n          id={id}\n          name={name}\n          number={number}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/filter/filter-selector';\nimport { List, Text } from '@chakra-ui/react';\n\nimport ContactItem from 'components/ContactItem/ContactItem';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <>\n      {contacts.length === 0 && (\n        <Text color=\"red.400\" mt=\"20px\" ml=\"20px\">\n          There is no such contact\n        </Text>\n      )}\n      <List mt=\"20px\" display=\"flex\" flexDirection=\"column\" gap=\"5px\">\n        {contacts.map(({ id, name, number }) => {\n          return <ContactItem key={id} id={id} name={name} number={number} />;\n        })}\n      </List>\n    </>\n  );\n};\nexport default ContactList;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/filter-slice';\nimport { selectFilter } from 'redux/filter/filter-selector';\nimport { SearchIcon } from '@chakra-ui/icons';\nimport {\n  FormControl,\n  Input,\n  InputGroup,\n  InputRightElement,\n} from '@chakra-ui/react';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  return (\n    <FormControl boxSize={{ base: '100%' }}>\n      <InputGroup>\n        <InputRightElement\n          pointerEvents=\"none\"\n          children={<SearchIcon color=\"gray\" />}\n        />\n        <Input\n          type=\"text\"\n          placeholder=\"Find contacts by name\"\n          value={filter}\n          onChange={e => dispatch(setFilter(e.target.value))}\n        />\n      </InputGroup>\n    </FormControl>\n  );\n};\n\nexport default Filter;\n","import { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectContacts,\n  selectIsLoading,\n} from 'redux/contacts/contacts-selector';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/contacts-operations';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { Box, Text, Flex, VStack } from '@chakra-ui/react';\nimport { ClipLoader } from 'react-spinners';\n\nconst ContactsPage = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const isContacts = Boolean(contacts.length);\n\n  return (\n    <Flex\n      direction={{ base: 'column', md: 'row' }}\n      align={{ base: 'center', md: 'stretch' }}\n      justify=\"space-between\"\n      m=\"0 auto\"\n      maxW={{ base: '100%', lg: '1200px' }}\n      py=\"12\"\n    >\n      <VStack\n        w={{ base: '100%', md: '400px' }}\n        h={{ base: 'auto', md: '320px' }}\n        spacing=\"6\"\n        p=\"6\"\n        borderRadius=\"6px\"\n        boxShadow=\"0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14), 0px 2px 1px rgba(0, 0, 0, 0.2);\"\n        border=\"1px solid #EBEBEB\"\n        height=\"100%\"\n      >\n        <Text fontSize=\"24px\" fontWeight=\"500\">\n          Add contacts\n        </Text>\n        <ContactForm />\n      </VStack>\n      <Box\n        w={{ base: '100%', md: '500px' }}\n        mt={{ base: '6', md: '0' }}\n        ml={{ base: '0', md: '12' }}\n      >\n        <Text\n          p=\"6px\"\n          borderRadius=\"6px\"\n          textAlign=\"center\"\n          fontSize=\"22\"\n          mb=\"10px\"\n          fontWeight=\"500\"\n          color=\"#fff\"\n          bg=\"blue.400\"\n        >\n          Contact list\n        </Text>\n        {isLoading && (\n          <Flex justify=\"center\">\n            <ClipLoader color=\"#007D34\" size={100} />\n          </Flex>\n        )}\n        {!isLoading && (\n          <Box>\n            {isContacts && <Filter />}\n            {isContacts && <ContactList />}\n            {!isContacts && (\n              <Text\n                color=\"#fff\"\n                bg=\"red.400\"\n                p=\"12px\"\n                borderRadius=\"6px\"\n                textAlign=\"center\"\n              >\n                Your phonebook is empty. <br /> Please add contact.\n              </Text>\n            )}\n          </Box>\n        )}\n      </Box>\n    </Flex>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","loading","toast","useToast","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","dispatch","useDispatch","handleChange","e","_e$target","target","value","Error","_jsx","onSubmit","preventDefault","addContact","unwrap","then","description","position","status","catch","children","_jsxs","FormControl","width","base","sm","FormLabel","htmlFor","InputGroup","InputLeftElement","pointerEvents","Icon","as","BsFillPersonFill","color","Input","id","type","placeholder","pattern","title","onChange","required","mt","PhoneIcon","Button","colorScheme","borderRadius","ml","MdAddCircle","height","pl","selectFilter","filter","selectVisibleContacts","createSelector","normalizeFilter","trim","toLowerCase","contact","includes","_ref","isOpen","handleClose","initialState","_objectSpread","setState","useCallback","_ref2","prevState","_defineProperty","Modal","onClose","ModalOverlay","ModalContent","marginX","ModalHeader","textAlign","fontSize","fontWeight","ModalCloseButton","ModalBody","updateContact","mr","onClick","setIsOpen","_Fragment","ListItem","display","boxShadow","p","alignItems","Box","Text","Tooltip","label","IconButton","icon","EditIcon","DeleteIcon","deleteContact","EditModal","useSelector","length","List","flexDirection","gap","map","ContactItem","boxSize","InputRightElement","SearchIcon","setFilter","isLoading","useEffect","fetchContacts","isContacts","Boolean","Flex","direction","md","align","justify","m","maxW","lg","py","VStack","w","h","spacing","border","ContactForm","mb","bg","ClipLoader","size","Filter","ContactList"],"sourceRoot":""}