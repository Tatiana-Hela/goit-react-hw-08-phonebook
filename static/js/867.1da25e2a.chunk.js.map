{"version":3,"file":"static/js/867.1da25e2a.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selector.js","components/ContactForm/ContactForm.jsx","redux/filter/filter-selector.js","components/EditModal.jsx/EditModal.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.loading;\nexport const selectIsError = state => state.contacts.error;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport {\n  Button,\n  Input,\n  InputGroup,\n  FormControl,\n  FormLabel,\n  Icon,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { PhoneIcon } from '@chakra-ui/icons';\nimport { MdAddCircle } from 'react-icons/md';\nimport { BsFillPersonFill } from 'react-icons/bs';\n\nimport { addContact } from 'redux/contacts/contacts-operations';\n\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        throw new Error(\"There isn't such option\");\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(addContact({ name, number }))\n      .unwrap()\n      .then(() => {\n        Notiflix.Notify.success('Contact added!');\n      })\n      .catch(() => {\n        Notiflix.Notify.failure(\n          'Something went wrong...Try reloading the page'\n        );\n      });\n    setName('');\n    setNumber('');\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <FormControl width=\"350px\">\n        <FormLabel htmlFor=\"name\">Name</FormLabel>\n        <InputGroup>\n          <InputLeftElement\n            pointerEvents=\"none\"\n            children={<Icon as={BsFillPersonFill} color=\"grey\" />}\n          />\n          <Input\n            id=\"name\"\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            placeholder=\"Enter name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            onChange={handleChange}\n            required\n          />\n        </InputGroup>\n        <FormLabel htmlFor=\"number\" mt=\"15px\">\n          Number\n        </FormLabel>\n        <InputGroup>\n          <InputLeftElement\n            pointerEvents=\"none\"\n            children={<PhoneIcon color=\"gray\" />}\n          />\n          <Input\n            id=\"number\"\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            placeholder=\"Enter number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            onChange={handleChange}\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </InputGroup>\n        <Button type=\"submit\" colorScheme=\"blue\" mt=\"20px\" borderRadius=\"6px\">\n          Add <Icon as={MdAddCircle} width=\"24px\" height=\"24px\" pl=\"6px\" />\n        </Button>\n      </FormControl>\n    </form>\n  );\n};\nexport default ContactForm;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectContacts } from 'redux/contacts/contacts-selector';\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectFilter, selectContacts],\n  (filter, contacts) => {\n    const normalizeFilter = filter.trim().toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.trim().toLowerCase().includes(normalizeFilter)\n    );\n  }\n);\n","import PropTypes from 'prop-types';\nimport Notiflix from 'notiflix';\nimport { useDispatch } from 'react-redux';\nimport { useState, useCallback } from 'react';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { Icon, PhoneIcon } from '@chakra-ui/icons';\nimport { BsFillPersonFill } from 'react-icons/bs';\n\nimport { updateContact } from 'redux/contacts/contacts-operations';\n\nconst EditModal = ({ isOpen, handleClose, id, name, number }) => {\n  const initialState = {\n    name,\n    number,\n  };\n\n  const [state, setState] = useState({ ...initialState });\n  const dispatch = useDispatch();\n  const handleChange = useCallback(\n    ({ target }) => {\n      const { name, value } = target;\n      setState(prevState => {\n        return { ...prevState, [name]: value };\n      });\n    },\n    [setState]\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(updateContact({ id, state }))\n      .unwrap()\n      .then(() => Notiflix.Notify.success('Contact edited'))\n      .catch(() =>\n        Notiflix.Notify.failure('Something went wrong...Try reloading the page')\n      );\n    handleClose();\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={handleClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader textAlign=\"center\" fontSize=\"22px\" fontWeight=\"500\">\n          Edit contact\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody pb={6}>\n          <form onSubmit={handleSubmit}>\n            <FormControl>\n              <FormLabel htmlFor=\"name\">Name</FormLabel>\n              <InputGroup>\n                <InputLeftElement\n                  pointerEvents=\"none\"\n                  children={<Icon as={BsFillPersonFill} color=\"grey\" />}\n                />\n                <Input\n                  id=\"name\"\n                  type=\"text\"\n                  name=\"name\"\n                  value={state.name}\n                  placeholder=\"Enter name\"\n                  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                  title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                  required\n                  onChange={handleChange}\n                />\n              </InputGroup>\n              <FormLabel htmlFor=\"number\" mt=\"15px\">\n                Number\n              </FormLabel>\n              <InputGroup>\n                <InputLeftElement\n                  pointerEvents=\"none\"\n                  children={<PhoneIcon color=\"gray\" />}\n                />\n                <Input\n                  id=\"number\"\n                  type=\"tel\"\n                  name=\"number\"\n                  value={state.number}\n                  placeholder=\"Enter number\"\n                  pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                  title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                  required\n                  onChange={handleChange}\n                />\n              </InputGroup>\n              <Button type=\"submit\" colorScheme=\"blue\" mr={3} mt=\"20px\">\n                Save\n              </Button>\n              <Button onClick={handleClose} mt=\"20px\">\n                Cancel\n              </Button>\n            </FormControl>\n          </form>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\nexport default EditModal;\n\nEditModal.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  isOpen: PropTypes.func.isRequired,\n  handleClose: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport Notiflix from 'notiflix';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { DeleteIcon, EditIcon } from '@chakra-ui/icons';\nimport { Box, IconButton, ListItem, Text } from '@chakra-ui/react';\n\nimport { deleteContact } from 'redux/contacts/contacts-operations';\nimport EditModal from 'components/EditModal.jsx/EditModal';\n\nconst ContactItem = ({ id, name, number }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleOpenModal = () => setIsOpen(true);\n  const handleCloseModal = () => setIsOpen(false);\n\n  const handleDeleteContact = () => {\n    dispatch(deleteContact(id))\n      .unwrap()\n      .then(() => Notiflix.Notify.success('Contact deleted'))\n      .catch(() =>\n        Notiflix.Notify.failure('Something went wrong...Try reloading the page')\n      );\n  };\n\n  return (\n    <>\n      <ListItem\n        key={id}\n        display=\"flex\"\n        boxShadow=\"0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14), 0px 2px 1px rgba(0, 0, 0, 0.2);\"\n        p=\"6px 10px\"\n        borderRadius=\"6px\"\n        bg=\"#F4F4F4\"\n        alignItems=\"center\"\n      >\n        <Box display=\"block\">\n          <Text fontSize=\"20px\" fontWeight=\"500\">\n            {name}\n          </Text>\n          <Text fontSize=\"18px\" color=\"#5F5F5F\">\n            {number}\n          </Text>\n        </Box>\n\n        <IconButton\n          ml=\"auto\"\n          colorScheme=\"green\"\n          aria-label=\"Edit contact\"\n          icon={<EditIcon />}\n          onClick={handleOpenModal}\n        />\n        <IconButton\n          ml=\"6px\"\n          colorScheme=\"red\"\n          aria-label=\"Delete contact\"\n          icon={<DeleteIcon />}\n          type=\"button\"\n          onClick={handleDeleteContact}\n        />\n      </ListItem>\n      {isOpen && (\n        <EditModal\n          isOpen={isOpen}\n          handleClose={handleCloseModal}\n          id={id}\n          name={name}\n          number={number}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/filter/filter-selector';\nimport { List, Text } from '@chakra-ui/react';\n\nimport ContactItem from 'components/ContactItem/ContactItem';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <>\n      {contacts.length === 0 && (\n        <Text color=\"red.400\" mt=\"20px\" ml=\"20px\">\n          There is no such contact\n        </Text>\n      )}\n      <List mt=\"20px\" display=\"flex\" flexDirection=\"column\" gap=\"5px\">\n        {contacts.map(({ id, name, number }) => {\n          return <ContactItem key={id} id={id} name={name} number={number} />;\n        })}\n      </List>\n    </>\n  );\n};\nexport default ContactList;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/filter-slice';\nimport { selectFilter } from 'redux/filter/filter-selector';\nimport { SearchIcon } from '@chakra-ui/icons';\nimport {\n  FormControl,\n  Input,\n  InputGroup,\n  InputRightElement,\n} from '@chakra-ui/react';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  return (\n    <FormControl width=\"350px\" m=\"0 auto\">\n      <InputGroup>\n        <InputRightElement\n          pointerEvents=\"none\"\n          children={<SearchIcon color=\"gray\" />}\n        />\n        <Input\n          type=\"text\"\n          placeholder=\"Find contacts by name\"\n          value={filter}\n          onChange={e => dispatch(setFilter(e.target.value))}\n        />\n      </InputGroup>\n    </FormControl>\n  );\n};\n\nexport default Filter;\n","import { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectIsError,\n} from 'redux/contacts/contacts-selector';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/contacts-operations';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { Box, Text } from '@chakra-ui/react';\nimport Notiflix from 'notiflix';\nimport { ClipLoader } from 'react-spinners';\n\nconst ContactsPage = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectIsError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  // console.log(contacts);\n  const isContacts = Boolean(contacts.length);\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"center\"\n      gap=\"100px\"\n      m=\"0 auto\"\n      p=\"60px 0 60px 60px\"\n    >\n      <Box\n        width=\"400px\"\n        height=\"320px\"\n        display=\"flex\"\n        flexDirection=\"column\"\n        alignItems=\"center\"\n        p=\"6\"\n        borderRadius=\"6px\"\n        boxShadow=\"0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14), 0px 2px 1px rgba(0, 0, 0, 0.2);\"\n        border=\"1px solid #EBEBEB\"\n      >\n        <Text fontSize=\"24px\" fontWeight=\"500\" mb=\"20px\">\n          Add contacts\n        </Text>\n        <ContactForm />\n      </Box>\n      {isLoading && (\n        <ClipLoader\n          color=\"#007D34\"\n          cssOverride={{\n            position: 'absolute',\n            display: 'block',\n          }}\n          size={100}\n        />\n      )}\n      <Box width=\"500px\" display=\"flex\" flexDirection=\"column\">\n        <Text\n          p=\"6px\"\n          width=\"220px\"\n          borderRadius=\"6px\"\n          textAlign=\"center\"\n          fontSize=\"22\"\n          m=\"0 auto\"\n          mb=\"10px\"\n          fontWeight=\"500\"\n          color=\"#fff\"\n          bg=\"blue.400\"\n        >\n          Contact list\n        </Text>\n        {isContacts && <Filter />}\n        {isContacts && <ContactList />}\n\n        {!isContacts && (\n          <Text\n            color=\"#fff\"\n            bg=\"red.400\"\n            p=\"12px\"\n            width=\"400px\"\n            textAlign=\"center\"\n            borderRadius=\"6px\"\n            m=\"0 auto\"\n          >\n            Your phonebook is empty. <br /> Please add contact.\n          </Text>\n        )}\n      </Box>\n      {error &&\n        Notiflix.Notify.failure(\n          'Something went wrong...Try reloading the page'\n        )}\n    </Box>\n  );\n};\nexport default ContactsPage;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","loading","selectIsError","error","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","dispatch","useDispatch","handleChange","e","_e$target","target","value","Error","_jsx","onSubmit","preventDefault","addContact","unwrap","then","Notiflix","catch","children","_jsxs","FormControl","width","FormLabel","htmlFor","InputGroup","InputLeftElement","pointerEvents","Icon","as","BsFillPersonFill","color","Input","id","type","placeholder","pattern","title","onChange","required","mt","PhoneIcon","Button","colorScheme","borderRadius","MdAddCircle","height","pl","selectFilter","filter","selectVisibleContacts","createSelector","normalizeFilter","trim","toLowerCase","contact","includes","_ref","isOpen","handleClose","initialState","_objectSpread","setState","useCallback","_ref2","prevState","_defineProperty","Modal","onClose","ModalOverlay","ModalContent","ModalHeader","textAlign","fontSize","fontWeight","ModalCloseButton","ModalBody","pb","updateContact","mr","onClick","setIsOpen","_Fragment","ListItem","display","boxShadow","p","bg","alignItems","Box","Text","IconButton","ml","icon","EditIcon","DeleteIcon","deleteContact","EditModal","useSelector","length","List","flexDirection","gap","map","ContactItem","m","InputRightElement","SearchIcon","setFilter","isLoading","useEffect","fetchContacts","isContacts","Boolean","justifyContent","border","mb","ContactForm","ClipLoader","cssOverride","position","size","Filter","ContactList"],"sourceRoot":""}